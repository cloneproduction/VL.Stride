// source:
// https://github.com/mrvux/dx11-vvvv-girlpower/blob/master/nodes/texture11/Filter/Dither.tfx

[Category("Filter")]
[Summary("Applies a dithering effect")]
shader DitherPSX_TextureFX : FilterBase, ShaderUtils
{
    //float Threshhold = 6.5f;
    compose ComputeFloat Threshhold;


    float channelError(float col, float colMin, float colMax)
    {
        float range = abs(colMin - colMax);
        float aRange = abs(col - colMin);
        return aRange /range;
    }

    float ditheredChannel(float error, float2 ditherBlockUV, float ditherSteps)
    {
        error = floor(error * ditherSteps) / ditherSteps;
        float2 ditherUV = float2(error, 0);
        ditherUV.x += ditherBlockUV.x;
        ditherUV.y = ditherBlockUV.y;
        return Texture1.SampleLevel(LinearSampler, ditherUV, 0).x;
    }

    float4 mix(float4 a, float4 b, float amt)
    {
        return ((1.0 - amt) * a) + (b * amt);
    }


    compose ComputeFloat2 DitherXY;

    float _Colors;

    float2 _MainTex_TexelSize;
    float2 _DitherPattern_TexelSize;
    

    float4 Filter(float4 tex0col)
    {
        //float4 col = Texture0.SampleLevel(LinearSampler, streams.TexCoord, 0);
        float4 yuv = RGBtoYUV(tex0col);

        // Clamp the YUV color to specified color depth (default: 32, 5 bits per channel, as per playstation hardware)
        float4 col1 = floor(yuv * _Colors) / _Colors;
        float4 col2 = ceil(yuv * _Colors) / _Colors;

        // Calculate dither texture UV based on the input texture
        float ditherSize = _DitherPattern_TexelSize.x;
        float ditherSteps = _DitherPattern_TexelSize.y/ditherSize;

        float2 ditherBlockUV = streams.TexCoord;
        ditherBlockUV.x %= (ditherSize / _MainTex_TexelSize.x);
        ditherBlockUV.x /= (ditherSize / _MainTex_TexelSize.x);
        ditherBlockUV.y %= (ditherSize / _MainTex_TexelSize.y);
        ditherBlockUV.y /= (ditherSize / _MainTex_TexelSize.y);
        ditherBlockUV.x /= ditherSteps;

        // Dither each channel individually
        yuv.x = lerp(col1.x, col2.x, ditheredChannel(channelError(yuv.x, col1.x, col2.x), ditherBlockUV, ditherSteps));
        yuv.y = lerp(col1.y, col2.y, ditheredChannel(channelError(yuv.y, col1.y, col2.y), ditherBlockUV, ditherSteps));
        yuv.z = lerp(col1.z, col2.z, ditheredChannel(channelError(yuv.z, col1.z, col2.z), ditherBlockUV, ditherSteps));

        return YUVtoRGB(yuv);
    }
};